---
description: UI component and styling guidelines using Shadcn UI, Radix UI, and Tailwind
globs: 
alwaysApply: false
---
# UI Components and Styling

UI component and styling guidelines using Shadcn UI, Radix UI, and Tailwind

## UI Framework
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS using a mobile-first approach
- Use `next/image` package for images

## Ghibli Theme Colors
The project uses a custom Ghibli-inspired theme with the following colors:

```js
// Ghibli Theme Colors
const ghibliColors = {
  background: "#f8f5e6",
  card: "#f0e6c0",
  text: "#5a3e2b",
  border: "#b89d65",
  borderDark: "#8c7851",
  primary: "#b89d65",
  primaryHover: "#a08a55",
  accent: "#6b8e50",
  blue: "#4a90a0",
  cloud: "#d9e5f0"
}
```

These colors are configured in `tailwind.config.js`:

```js
module.exports = {
  theme: {
    extend: {
      colors: {
        "ghibli-bg": ghibliColors.background,
        "ghibli-card": ghibliColors.card,
        "ghibli-text": ghibliColors.text,
        "ghibli-border": ghibliColors.border,
        "ghibli-border-dark": ghibliColors.borderDark,
        "ghibli-primary": ghibliColors.primary,
        "ghibli-primary-hover": ghibliColors.primaryHover,
        "ghibli-accent": ghibliColors.accent,
        "ghibli-blue": ghibliColors.blue,
        "ghibli-cloud": ghibliColors.cloud,
      }
    }
  }
}
```

### Ghibli-Themed Components

#### Button
```tsx
function GhibliButton({ children, ...props }) {
  return (
    <button
      className="bg-ghibli-primary hover:bg-ghibli-primary-hover text-ghibli-card border-2 border-ghibli-border-dark rounded-lg px-4 py-2 transition-colors"
      {...props}
    >
      {children}
    </button>
  )
}
```

#### Card
```tsx
function GhibliCard({ title, children }) {
  return (
    <div className="bg-ghibli-card p-6 rounded-xl border-2 border-ghibli-border shadow-lg">
      <h3 className="text-xl font-serif tracking-wide text-ghibli-text mb-4">{title}</h3>
      <div className="text-ghibli-text/80">
        {children}
      </div>
    </div>
  )
}
```

## Install new Shadcn components

```sh
pnpm dlx shadcn@latest add COMPONENT
```

Example:

```sh
pnpm dlx shadcn@latest add progress
```

## Data Fetching with SWR
For API get requests to server use the `swr` package:

```typescript
const searchParams = useSearchParams();
const page = searchParams.get("page") || "1";
const { data, isLoading, error } = useSWR<PlanHistoryResponse>(
  `/api/user/planned/history?page=${page}`
);
```

## Loading Components
Use the `LoadingContent` component to handle loading states:

```tsx
<Card>
  <LoadingContent loading={isLoading} error={error}>
    {data && <MyComponent data={data} />}
  </LoadingContent>
</Card>
```

## Form Components
### Text Inputs
```tsx
<Input
  type="email"
  name="email"
  label="Email"
  registerProps={register("email", { required: true })}
  error={errors.email}
/>
```

### Text Area
```tsx
<Input
  type="text"
  autosizeTextarea
  rows={3}
  name="message"
  placeholder="Paste in email content"
  registerProps={register("message", { required: true })}
  error={errors.message}
/>
```