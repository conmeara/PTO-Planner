---
description: 
globs: 
alwaysApply: false
---
Below is a **technical implementation plan** for introducing **Suggested PTO Strategies** into your existing application. This plan focuses on how to integrate different strategy algorithms, store and manage user-selected strategies, and display those suggested PTO days in the UI. No full solution code is provided—only a structured breakdown of the changes needed.

---

# 1. High-Level Feature Overview

Users will be able to select a **PTO Strategy** (e.g., Balanced Mix, Long Weekends, Mini Breaks, etc.) from the “Suggested PTO” tab. The application will:

1. **Collect** the user’s relevant data:
   - PTO bank, accrual rate, etc. (from `ptoStore.ts`)
   - Holiday list, weekends (from `holidayStore.ts`)
2. **Generate** a recommended set of PTO days based on the chosen strategy.
3. **Display** these recommended days on the calendar and in a summary list, allowing the user to optionally “Add to My PTO” (which toggles the actual `selectedPTODays`).

In the existing code, your `optimizeDaysOff(...)` function in `holidayUtils.ts` already does a basic day-gap identification for “optimizing” time off. We will generalize or expand that logic to support **multiple** strategies.

---

# 2. Data Flow & Architectural Considerations

1. **Where to store the user’s selected strategy**  
   - Add a new writable store, `selectedStrategy`, in either `holidayStore.ts` or a new file `strategyStore.ts`.
   - This store will hold the currently chosen strategy as a string, e.g. `"balanced"`, `"long-weekends"`, `"mini-breaks"`, etc.
   
2. **Calculating strategy-based PTO**  
   - Create a new module, for instance `optimizationUtils.ts`, or extend `holidayUtils.ts` with multiple strategy functions:
     - `getBalancedMixDays(...)`
     - `getLongWeekendsDays(...)`
     - `getMiniBreaksDays(...)`
     - `getWeekLongBreaksDays(...)`
     - `getExtendedVacationsDays(...)`
   - Each function will produce an array of `Date` objects that represent *recommended* PTO days.

3. **Ensuring all relevant data is passed**  
   - Each of these strategy functions will need the user’s current PTO bank, accrual rate/frequency, weekends, holidays, etc. You may centralize these in an object param:
     ```ts
     interface StrategyInput {
       year: number;
       weekends: number[];
       holidays: Holiday[];
       ptoBalance: number;
       accrualRate: number;
       accrualFrequency: 'weekly' | 'bi-weekly' | 'monthly';
       // ...plus any other fields, e.g. user’s location or partial-day logic
     }
     ```
   - The strategy function returns an array of suggested `Date`s, or an extended metadata structure if needed.

4. **UI hooking**  
   - You already have a “Suggested PTO” tab in `CalendarLegendMenu.svelte`. Inside that panel, you can add a **Strategy Selector** UI element (e.g., `<select>`, radio buttons, or a button group).
   - When the user picks a strategy, it updates `selectedStrategy` in a store, which triggers a recalculation in a derived store or effect.

5. **Add to My PTO**  
   - Provide a button or link next to each recommended set that says “Add to My PTO” (or “Apply to Calendar”). This will call your existing store function `toggleSelectedPTODay(date)` for each suggested day.  

---

# 3. Detailed Steps & File-by-File Changes

## 3.1 Create or Update a Store for Strategy Selection

**File**: `src/lib/stores/holidayStore.ts` (or create a new `strategyStore.ts`)

1. **Add** a new writable store:  
   ```ts
   import { writable, derived } from 'svelte/store';

   // New store for user’s chosen strategy
   export const selectedStrategy = writable<'balanced' | 'long-weekends' | 'mini-breaks' | 'week-long' | 'extended' | 'none'>('none');
   ```
2. **Optionally** create a derived store that, given `selectedStrategy` plus holiday/PTO data, calls a new function to get recommended days. Alternatively, you can do this in `holidayUtils.ts`. For instance:
   ```ts
   export const strategySuggestedDays = derived(
     [selectedStrategy, year, holidays, ptoBalance, ptoAccrualRate, ptoAccrualFrequency, weekendDays],
     ([$selectedStrategy, $year, $holidays, $ptoBalance, $ptoAccrualRate, $ptoAccrualFrequency, $weekendDays]) => {
       if ($selectedStrategy === 'none') return [];

       // Construct a StrategyInput object
       const input: StrategyInput = {
         year: $year,
         weekends: $weekendDays,
         holidays: $holidays.filter(h => !h.hidden),
         ptoBalance: $ptoBalance,
         accrualRate: $ptoAccrualRate,
         accrualFrequency: $ptoAccrualFrequency
       };

       // Switch or map the strategy to the correct function
       switch ($selectedStrategy) {
         case 'balanced': return getBalancedMixDays(input);
         case 'long-weekends': return getLongWeekendsDays(input);
         case 'mini-breaks': return getMiniBreaksDays(input);
         case 'week-long': return getWeekLongBreaksDays(input);
         case 'extended': return getExtendedVacationsDays(input);
         default: return [];
       }
     }
   );
   ```
3. **Persist** `selectedStrategy` in localStorage if desired:
   ```ts
   if (typeof window !== 'undefined') {
     selectedStrategy.subscribe(value => localStorage.setItem('selectedStrategy', value));
   }
   ```

---

## 3.2 Implement the Strategy Algorithms

**File**: `src/lib/utils/optimizationUtils.ts` (new file) or expand `holidayUtils.ts`  

Create separate functions for each strategy. Each function will:

- Take a **`StrategyInput`** param with relevant user data
- Return an array of `Date` objects for recommended PTO days

### Example function signature

```ts
export function getBalancedMixDays(input: StrategyInput): Date[] {
  const {
    year,
    weekends,
    holidays,
    ptoBalance,
    accrualRate,
    accrualFrequency
  } = input;

  // 1. Identify potential blocks around holidays & weekends
  // 2. Ensure we only use up to `ptoBalance` total days
  // 3. Distribute them for a “balanced” set of short/medium breaks
  // ...
  return []; // array of recommended Date objects
}
```

Repeat similarly for:

- **`getLongWeekendsDays`**: focuses on bridging 3- to 4-day weekends by adding 1-2 PTO days around existing holidays/weekends.
- **`getMiniBreaksDays`**: aims for multiple 5–6 day spans throughout the year.
- **`getWeekLongBreaksDays`**: lumps PTO to create 7–9 day breaks.
- **`getExtendedVacationsDays`**: tries to create one or two 10–15 day breaks if the PTO bank is large enough.

**Implementation Details**:
1. **Longest break first** vs. **short breaks first**: Each function has a unique approach. For “long weekends,” you might find every Saturday–Monday combo and fill the missing Friday or Tuesday if the user has enough PTO.  
2. **Check accrual**: If you need to factor in *when* the user will have enough PTO, you may incorporate the logic from `getAvailablePTOOnDate(date)`. This is more complex; some strategies might ignore dynamic accrual for a first version.  
3. **Stop** if you exceed `ptoBalance` or the user’s total possible accrual by a certain date.

---

## 3.3 Add a Strategy Selection UI in the “Suggested PTO” Panel

**File**: `src/lib/components/ui/CalendarLegendMenu.svelte`

Within the “`suggested`” tab of your existing code:

1. **Add** a drop-down or radio group for strategy selection. For example:
   ```svelte
   <!-- In the "Suggested PTO" panel -->
   <div class="strategy-selector">
     <label for="strategy">Strategy:</label>
     <select id="strategy" bind:value={$selectedStrategy}>
       <option value="none">--Select a Strategy--</option>
       <option value="balanced">Balanced Mix</option>
       <option value="long-weekends">Long Weekends</option>
       <option value="mini-breaks">Mini Breaks</option>
       <option value="week-long">Week-Long Breaks</option>
       <option value="extended">Extended Vacations</option>
     </select>
   </div>
   ```

2. **Import** and use the newly created store:
   ```svelte
   <script lang="ts">
     import { selectedStrategy } from '../../stores/holidayStore'; // or new `strategyStore.ts`
     // ...
   </script>
   ```

3. **Display** the results from `strategySuggestedDays` in a list:
   ```svelte
   {#if $strategySuggestedDays.length > 0}
     <ul>
       {#each $strategySuggestedDays as day}
         <li>{formatDate(day)} <button on:click={() => addDayToMyPTO(day)}>Add</button></li>
       {/each}
     </ul>
   {/if}
   ```

4. **Add** a method to toggle suggested days as selected. Typically, you already have `toggleSelectedPTODay(date)` in `ptoStore.ts`. Use that or create a small loop to add them in bulk:
   ```svelte
   function addDayToMyPTO(day: Date) {
     toggleSelectedPTODay(day);
   }

   function applyAllSuggested() {
     for (const day of $strategySuggestedDays) {
       toggleSelectedPTODay(day);
     }
   }
   ```

---

## 3.4 CalendarMonth Integration (Highlight Suggested Days)

If you wish to **highlight** strategy-suggested days in the calendar (similar to “optimizedDaysOff” styling):

1. **Add** a second highlight condition for `$strategySuggestedDays` in `CalendarMonth.svelte`.  
   - For example:
     ```svelte
     export let suggestedDays: Date[] = []; // pass from CalendarGrid or the store

     function isSuggestedDayOff(day: number): boolean {
       return suggestedDays.some(date =>
         date.getFullYear() === year &&
         date.getMonth() === month &&
         date.getDate() === day
       );
     }
     ```
2. **In** the `<div class="day ...">`, add a condition to set a new CSS class if `isSuggestedDayOff(day)` is true, e.g. `.strategy-suggested`.

3. **Pass** `$strategySuggestedDays` to each `CalendarMonth` in `CalendarGrid.svelte`:
   ```svelte
   import { strategySuggestedDays } from '../../stores/holidayStore';
   // ...
   <CalendarMonth
     {year}={...}
     suggestedDays={$strategySuggestedDays}
     ... 
   />
   ```

---

## 3.5 Potential Side Effects & Considerations

1. **Performance**  
   - If large or complex logic is used for advanced strategies, consider memoizing or throttling.  
   - Also be mindful of how often derived stores re-run the strategy computations.

2. **Date Boundaries**  
   - Some strategies need to handle partial-year or multi-year scenarios. Decide if you only focus on the current year or can cross into next year. 

3. **Accrual Timing**  
   - For a first pass, you may ignore the exact day-by-day accrual timeline. If you do want to be precise about *when* the user accumulates enough PTO, incorporate `getAvailablePTOOnDate()` in each strategy.

4. **User Overriding**  
   - If a user has limited PTO or changes their “weekends,” your strategy logic must handle these dynamic inputs gracefully.

---

# 4. Summary of Key Architectural Decisions

1. **Modularize** strategies in a dedicated file for clarity (`optimizationUtils.ts`).  
2. **Separate** your “Selected PTO” from “Strategy-Suggested PTO”:
   - Keep “selectedPTODays” store for the user’s actual plan.
   - Keep “strategySuggestedDays” derived from a chosen strategy + user data.  
3. **Expose** a simple UI mechanism for switching strategies (`selectedStrategy` store).  
4. **Optionally** highlight suggested days in the calendar with distinct styling, or show them only in the “Suggested PTO” tab.  
5. **Allow** bulk application of suggested days or day-by-day toggling so the user can partially adopt the suggestions.

---

## Final Deliverables Recap

1. **New Store**:
   - `selectedStrategy` (`'none' | 'balanced' | 'long-weekends' | ...`)
   - Possibly a derived store `strategySuggestedDays`.

2. **New Utility Module** (`optimizationUtils.ts`):
   - `getBalancedMixDays(input)`: Return `Date[]`
   - `getLongWeekendsDays(input)`: Return `Date[]`
   - `getMiniBreaksDays(input)`: Return `Date[]`
   - `getWeekLongBreaksDays(input)`: Return `Date[]`
   - `getExtendedVacationsDays(input)`: Return `Date[]`

3. **UI Changes**:
   - **Strategy Selector** in the “Suggested PTO” tab of `CalendarLegendMenu.svelte`
   - “Apply” or “Add to My PTO” button(s)

4. **Calendar Integration**:
   - Optional highlighting for suggested days, analogous to how optimizedDaysOff are currently handled.

With this plan, you can implement multiple **Suggested PTO Strategies** while leveraging your existing architecture (stores, components, holiday utility logic) in a clean, modular way.